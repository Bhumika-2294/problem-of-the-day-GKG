
class Solution {
  public:
    bool isSubsetSum(vector<int>& arr, int sum) {
       
    int n = arr.size();
    vector<vector<bool>> dp(n + 1, vector<bool>(sum + 1, false));

    // Base case: Sum 0 can always be made with an empty subset
    for (int i = 0; i <= n; ++i) {
        dp[i][0] = true;
    }

    // Fill the dp table
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= sum; ++j) {
            // If we don't include arr[i-1]
            dp[i][j] = dp[i-1][j];

            // If we include arr[i-1], and the sum is achievable
            if (j >= arr[i-1]) {
                dp[i][j] = dp[i][j] || dp[i-1][j - arr[i-1]];
            }
        }
    }

    // The answer will be in dp[n][sum]
    return dp[n][sum];

        // code here
        
    }
};
